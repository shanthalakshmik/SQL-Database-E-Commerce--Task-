-- Create the e-commerce database
CREATE DATABASE IF NOT EXISTS ecommerce;
USE ecommerce;

-- Create the customers table
CREATE TABLE IF NOT EXISTS customers (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    address TEXT
);

-- Create the products table
CREATE TABLE IF NOT EXISTS products (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100) NOT NULL,
    price DECIMAL(10, 2) NOT NULL,
    description TEXT
);

-- Create the orders table
CREATE TABLE IF NOT EXISTS orders (
    id INT PRIMARY KEY AUTO_INCREMENT,
    customer_id INT,
    order_date DATE DEFAULT (18/11/2024),
    total_amount DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (customer_id) REFERENCES customers(id)
);
-- Insert data into customers table
INSERT INTO customers (name, email, address) VALUES
('Shantha Lakshmi', 'santha@gmail.com', '123 Main St'),
('Joney Stark', 'joney@gmail.com', '456 Elm St'),
('Thiru Krish', 'Thiru@gmail.com', '789 Oak St');

INSERT INTO products (name, price, description) VALUES
('Product A', 20.00, 'Description for Product A'),
('Product B', 30.00, 'Description for Product B'),
('Product C', 40.00, 'Description for Product C');
INSERT INTO orders (customer_id, order_date, total_amount) VALUES
(1, '2024-10-15', 100.00),
(2, '2024-11-05', 200.00),
(1, '2024-11-10', 150.00);
-- Get customers with orders placed in the last 30 days
SELECT DISTINCT c.name, c.email
FROM customers c
JOIN orders o ON c.id = o.customer_id
WHERE o.order_date >= CURDATE() - INTERVAL 30 DAY;

-- Get total amount of orders for each customer
SELECT c.name, SUM(o.total_amount) AS total_spent
FROM customers c
JOIN orders o ON c.id = o.customer_id
GROUP BY c.name;

-- Update the price of Product C
UPDATE products
SET price = 45.00
WHERE name = 'Product C';

-- Add discount column to products table
ALTER TABLE products
ADD COLUMN discount DECIMAL(5, 5) DEFAULT 0.00;

-- Get top 3 products with the highest price
SELECT name, price
FROM products
ORDER BY price DESC
LIMIT 3;

-- Get customers who ordered Product A
SELECT DISTINCT c.name
FROM customers c
JOIN orders o ON c.id = o.customer_id
JOIN products p ON p.name = 'Product A';

-- Join orders and customers to get customer name and order date
SELECT c.name, o.order_date
FROM customers c
JOIN orders o ON c.id = o.customer_id;

-- Get orders with total amount greater than 150.00
SELECT *
FROM orders
WHERE total_amount > 150.00;

-- Create the order_items table
CREATE TABLE IF NOT EXISTS order_items (
    id INT PRIMARY KEY AUTO_INCREMENT,
    order_id INT,
    product_id INT,
    quantity INT DEFAULT 1,
    FOREIGN KEY (order_id) REFERENCES orders(id),
    FOREIGN KEY (product_id) REFERENCES products(id)
);
-- Remove total_amount from orders table (optional after normalization)
ALTER TABLE orders
DROP COLUMN total_amount;

-- Get the average total of all orders
SELECT AVG(total_amount) AS average_order_total
FROM orders;
SELECT * FROM customers;







 